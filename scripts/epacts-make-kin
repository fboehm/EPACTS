#!/usr/bin/perl -w

use strict;
use Cwd;
use File::Basename;
use FindBin;
use lib "$FindBin::Bin";
use wGetOptions qw(wpod2usage wGetOptions);
use epacts qw(@chrs @szchrs parsePheno $binmake $binrm readPedVcf initRef intervalsByUnit intervalsByBED readBED $defaultfasta);

my $vcf = "";
my $out = "";
my $chr = "";
my $field = "GT";
my $ped = "";
my $unit = 10000000;
my $minMAF = 0.01;
my $minCallRate = 0.95;
my $pass = "";
my $rule = "";
my $sepchr = "";
my $run = -1;
my $ref = $defaultfasta;
my $restart = "";
my $removeComplex = "";
my $bedComplex = "";
my $includeSexChr = "";
my $mosixNodes = "";
my $intervalList = "";
#my @complex = (["5",44000001,52000000],["6",24000001,36000000],["8",8000001,12000000],["11",42000001,58000000],["17",40000001,43000000]);
my %complex = ( 5 => [44000001,52000000],
		6 => [24000001,36000000],
		8 => [8000001,12000000],
		11 => [42000001,58000000],
		17 => [40000001,43000000] );

## Parse options and print usage if there is a syntax error,
## or if usage was explicitly requested.
wGetOptions(
    "-Create kinship matrix from VCF file for EPACTS",

    "--Required Options",
    "vcf=s",[\$vcf,
	     "Input VCF file (tabixed and bgzipped)",
	     "Input VCF file to calculate kinship matrix from. The VCF file must be tabixed and bgzipped"
	     ],
    "out=s",[\$out,
	     "Output kinship file name",
	     ],

    "--Key Options",
    "ped=s",[\$ped,
	     "PED file containing subset of individuals to include",
	     "PED format file containing a subset of individuals to include in the kinship matrix calculation"
	     ],
    "field=s",[\$field,
	       "VCF's FORMAT field of genotypes or dosages",
	       "Entry in the FORMAT field in the VCF to extract the genotype information from. Typically GT is used"
    ],
    "interval-list=s",[\$intervalList,
		       "List of intervals as a unit to perform association in standard BED format",
		       "List of intervals as a unit to perform association in standard BED format (0-based-inclusive-start, 0-based-exclusive-end)",
    ],      
    "unit=i",[\$unit,
	      "Base pair units for a parallel run",
	      "Chunk size (in bp) as a unit for parallelizd run for calculating kinship matrix"
	      ],
    "min-maf=f",[\$minMAF,
		 "Minimum minor allele frequency",
		 "Minimum minor allele frequency. 0.01 is recommended",
		 ],
    "min-callrate=f",[\$minCallRate,
		      "Minimum call rate",
		      "Minimum genotype call rate (1-missing rate) for each variant. 0.95 is recommended",
		      ],
    "run=i",[\$run,
	     "Run immediately with specified # CPUs",
	     "Automatically runs GNU make after creating the Makefile. If this is not set, the user must run GNU make separately for finishing the run of epacts-make-kin",
	     ],
    "sepchr",[\$sepchr,
	      "VCFs are separated by chromosomes",
	      "Indicator of separated VCF by chromosomes. The VCF file name must contain chr1, chr2, chr3,....",
	      ],
    "remove-complex",[\$removeComplex,
		      "Remove complex regions with high LD",
		      "Remove known complex regions with high linkage disequilibrium",
		      ],

    "--Additional Options",
    "rule=s",[\$rule,
	      "Substring in the INFO field to be matched",
	      "Option to select a subset of variants based on INFO field. This select only the variants with particular subseting included in the VCF",
	      ],
    "chr=s",[\$chr,
	     "Run only a single chromosome",
	     "Runing only a single chromosome, instead of running all autosomal chromosomes to calculate the kinship matrix",
    ],
    "ref=s",[\$ref,
	     "Reference FASTA file",
	     "Reference FASTA file with index (.fai). Default is GRCh37 reference sequence (but you may need to run B<epacts download> first if you do not have local copy)",
	     ],    
    "pass",[\$pass,
	    "Use only PASS-filtered sites",
	    "Include only variants with PASS in the FILTER column in the VCF when calculating the kinship coefficient",
	    ],
    "restart",[\$restart,
	       "Ignore intermediate results and restart from scratch",
	       "Ignore intermediate results and restart from scratch. Equivalent to running GNU make with -B option",
	       ],
    "bed-complex=s",[\$bedComplex,
		     "Custom BED file to specify the complex region",
		     "Custom BED file to specify the complex region to be excluded in the kinshop calculation"
		     ],
    "include-sex-chr",[\$includeSexChr,
		       "Include sex chromosome (not recommended)",
		       "Include sex chromosomes (chrX and chrY) for calculating the kinship coefficient. This option may create batch effect between individuals with opposite sex",
		       ],
    "mosix-nodes=s",[\$mosixNodes,
		     "Comma-separated list of MOSIX cluster nodes",
		    ],
    ) || wpod2usage(2);

unless ( ( $vcf ) && ( $out ) ) {
    print STDERR "ERROR: Missing required option\n";
    wpod2usage(2);
}

#$ref = $defaultfasta if ( $ref eq "" );
&initRef($ref);

die "ERROR: Cannot find FASTA reference file $ref or $ref.fai. Please specify the correct FASTA file with --ref option\n" unless ( -s "$ref.fai" );

$minMAF = sprintf("%lg",$minMAF);
$minCallRate = sprintf("%lg",$minCallRate);

my $epactsdir = dirname($FindBin::Bin);

#$epactsdir =~ s/\/[^\/]+$//;

## preprocess input VCF files to get the list of individual IDS
die "ERROR: Cannot open $vcf\n" unless ( -s $vcf );
die "ERROR: Cannot open $vcf index. The VCF file must be indexed\n" unless ( substr($vcf, -4) eq ".sav" || -s "$vcf.tbi" || -s "$vcf.csi" );

my $optind = "";
if ( $ped ) {
    my ($rVcfIds,$rhPhes,$rhCovs) = &readPedVcf($epactsdir,$ped,$vcf);
    my @vcfIds = @{$rVcfIds};
    my %hPhes = %{$rhPhes};
    my %hCovs = %{$rhCovs};
    
    open(IND,">$out.ind") || die "Cannot open IND file $out.ind for writing\n";
    my $nInds = 0;
    for(my $i=0; $i < @vcfIds; ++$i) {
	my $id = $vcfIds[$i];
	if ( defined($hPhes{$id}) ) {
	    print IND "$id\t".($i+1)."\n";
	    ++$nInds;
	}
    }
    close IND;
    $optind = "--indf $out.ind";
}

if ( ( ! $sepchr ) && ( $vcf =~ /chr/ ) && ( ! $chr ) ) {
    print STDERR "*************************************************************************************\n";
    print STDERR "******* IMPORTANT WARNING ***********************************************************\n";
    print STDERR "******* If your VCF is separated by chromosome, you must put set --sepchr option ****\n";
    print STDERR "******* Otherwise, you may end up having only single chromosome's result ************\n";
    print STDERR "*************************************************************************************\n";
}

open(MAK,">$out.Makefile") || die "Cannot open file\n";
print MAK ".DELETE_ON_ERROR:\n\n";

my @kins = ();
my @kcmds = ();
my @tgts = ();
my @cmds = ();

my $rIntervals;
if ( $intervalList ) {
    $rIntervals = &intervalsByBED($intervalList,\@chrs,\@szchrs,$chr,"");
}
else {
    my $rbed = $bedComplex ? &readBED($bedComplex) : \%complex;
    $rIntervals = &intervalsByUnit($unit,\@chrs,\@szchrs, $removeComplex ? $rbed : undef,$chr,"");
}

die "ERROR: Interval size mismatch\n" unless ( $#{$rIntervals} == $#chrs );

for(my $i=0; $i < @chrs; ++$i) {
    my @chrIntervals = @{$rIntervals->[$i]};
    next if ( $#chrIntervals < 0 );
    my $szchr = $szchrs[$i];
    
    print STDERR "Kinship : Processing chromosome $chrs[$i]...\n";
    my $cvcf = $vcf;
    if ( $sepchr ) {
	die "ERROR: with --sepchr option, $vcf must contain chr1" unless ( $vcf =~ /chr1/ );
	if ( $chrs[0] =~ /^chr/ ) {
	    $cvcf =~ s/chr1/$chrs[$i]/g;		
	}
	else {
	    $cvcf =~ s/chr1/chr$chrs[$i]/g;
	}
	unless ( -s $cvcf ) {
	    print STDERR "WARNING: $cvcf does not exist. Skipping..\n";
	    next;
	}
    }

    for(my $j=0; $j < @chrIntervals; ++$j) {
	my ($start,$end) = @{$chrIntervals[$j]};    

	my $op = "$out.$chrs[$i].$start.$end";
	my $region = "$chrs[$i]:$start-$end";

	## calculate per-region kinship if needed only for chr1-22
	if ( ( $chrs[$i] =~ /^\d+$/) || ( $chrs[$i] =~ /^chr\d+/ ) || ($includeSexChr) ) {
	    my $kin = "$op.kin";
	    my $cmd = "$epactsdir/bin/pEmmax gen-kin --vcf $cvcf $optind --region $region --field $field --minMAF $minMAF --minCallRate $minCallRate --out-kinf $kin --raw".($pass ? "" : " --ignoreFilter").($rule ? " --rule $rule" : "");
	    if ( $mosixNodes ) { $cmd = &getMosixCmd($cmd,$mosixNodes); }
	    $cmd = "\t$cmd\n";
		    
	    push(@kins,$kin);
	    push(@kcmds,$cmd);
	}
    }
}

my $outkinf = $out;

print MAK "all: $outkinf\n\n";
print MAK "$outkinf: @kins\n";
print MAK "\t$epactsdir/bin/pEmmax merge-kin --out-kinf $outkinf @kins\n";
print MAK "\t$binrm -f @kins\n";
for(my $i=0; $i < @kins; ++$i) {
    print MAK "$kins[$i]: $vcf\n";
    print MAK "$kcmds[$i]\n";
}

print "Finished generating EPACTS Makefile\n";
if ( $run < 0 ) {
    print "EPACTS will run the with the following commond:\n";
    print "\tmake -f $out.Makefile -j [# of parallel jobs]\n";
    print "Or perform sanity checking using the following command:\n";
    print "\tmake -f $out.Makefile -n\n";
}
elsif ( $run == 0 ) {
    print "Running maximum parallel jobs of EPACTS\n";
    my $cmd = "$binmake -f $out.Makefile -j ".(($restart) ? " -B" : "");
    print "$cmd\n";
    print `$cmd`;
    die "FATAL ERROR - epacts-make-kin: Error occured while running make" if ( $? == -1 ); 
}
else {
    print "Running $run parallel jobs of EPACTS\n";
    my $cmd = "$binmake -f $out.Makefile -j $run".(($restart) ? " -B" : "");
    print "$cmd\n";
    print `$cmd`;
    die "FATAL ERROR - epacts-make-kin: Error occured while running make" if ( $? == -1 ); 
}
